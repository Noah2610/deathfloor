initSidebarItems({"enum":[["HealthAction",""],["LifecycleState","A lifecycle's state. Entities' live in variant declaration order, meaning they first have the `Initial` state, and end with the `Despawn` state."]],"struct":[["Confined","Entities that have `Confined` and at least a `Transform`, are confined to the confined `Rect`'s area, with the `ConfineEntitiesSystem`."],["Follow","The `Follow` component makes an entity with a `Transform` follow another entity with a `Transform`. Gives this component to an entity, which should follow another entity."],["Health",""],["HealthActionQueue","Can manipulate the entity's `Health` component via `HealthAction`s. Through this component, the entity can lose and gain health."],["Hidden","Hidden mesh component Useful for entities, that should not be rendered, but stay loaded in memory."],["Lifecycle","An entity can have a `Lifecycle`, which lives through different `LifecycleState`s. After spawning, it will stay alive for most of its existence. Once it's `Health` drops to `0`, it will be dying, and eventually despawn/deleted. See the `LifecycleState` for more details on each lifecycle stage."],["Loadable","Entities which have `Loadable` may be loaded or unloaded (get or remove the `Loaded` component) later on."],["Loaded","Entities which have `Loadable` and `Loaded` will be included in collision detection."],["Loader","`Loader` entities can load `Loadable` entities, whose transforms are within a loading distance from the `Loader` entity's transform."],["ScaleOnce","For entities which have `Transform`, `Size`, `SpriteRender`, and `ScaleOnce`, their sprites will be scaled to the entity's size once. After scaling, this component is removed from the entity."],["Size","`Size` is used in multiple places, including collision and scaling."],["SpriteRender","Information for rendering a sprite."],["Transform","Local position, rotation, and scale (from parent if it exists)."],["Transparent","Transparent mesh component"]],"type":[["HitPoints",""]]});