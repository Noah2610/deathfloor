initSidebarItems({"derive":[["SystemData","Used to `#[derive]` the trait `SystemData`."]],"enum":[["Texture","Texture wrapper."]],"fn":[["is_entity_loaded",""]],"struct":[["AmethystCamera","Camera struct."],["AssetStorage","An asset storage, storing the actual assets and allocating handles to them."],["Entity","`Entity` type, as seen by the user."],["Handle","A handle to an asset. This is usually what the user deals with, the actual asset (`A`) is stored in an `AssetStorage`."],["InputHandler","This struct holds state information about input devices."],["Read","Allows to fetch a resource in a system immutably."],["ResourceId","The id of a [`Resource`], which simply wraps a type id and a \"dynamic ID\". The \"dynamic ID\" is usually just left `0`, and, unless such documentation says otherwise, other libraries will assume that it is always `0`; non-zero IDs are only used for special resource types that are specifically defined in a more dynamic way, such that resource types can essentially be created at run time, without having different static types."],["SpriteRender","Information for rendering a sprite."],["SpriteSheet","Meta data for a sprite sheet texture."],["Storage","A wrapper around the masked storage and the generations vector. Can be used for safe lookup of components, insertions and removes. This is what `World::read/write` fetches for the user."],["Time","Frame timing values."],["World","A [Resource] container, which provides methods to insert, access and manage the contained resources."],["Write","Allows to fetch a resource in a system mutably."]],"trait":[["Join","The purpose of the `Join` trait is to provide a way to access multiple storages at the same time with the merged bit set."],["System","A `System`, executed with a set of required [`Resource`]s."],["SystemData","A static system data that can specify its dependencies at statically (at compile-time). Most system data is a `SystemData`, the `DynamicSystemData` type is only needed for very special setups."]],"type":[["Entities","A wrapper for a read `Entities` resource. Note that this is just `Read<Entities>`, so you can easily use it in your system:"],["Index","An index is basically the id of an `Entity`."],["ReadExpect","Allows to fetch a resource in a system immutably. This will panic if the resource does not exist. Usage of `Read` or `Option<Read>` is therefore recommended."],["ReadStorage","A storage with read access."],["SpriteSheetHandle","An asset handle to sprite sheet metadata."],["TextureHandle",""],["WriteExpect","Allows to fetch a resource in a system mutably. This will panic if the resource does not exist. Usage of `Write` or `Option<Write>` is therefore recommended."],["WriteStorage","A storage with read and write access."]]});