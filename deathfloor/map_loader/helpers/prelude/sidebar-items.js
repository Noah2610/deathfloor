initSidebarItems({"enum":[["Axis","Just a plain `Axis` enum with `X` and `Y` variants."]],"struct":[["AxisIter","An iterator over both axes."],["Entity","`Entity` type, as seen by the user."],["EntityBuilder","The entity builder, allowing to build an entity together with its components."],["Rect","A `Rect` is simply an area. It has positions bounding sides (top, bottom, left, right)."],["RectBuilder","Builder for `Rect`."],["SpriteSheetHandles","This is a resource wrapper for amethyst's `SpriteSheet`s. It can load and get `SpriteSheetHandle`s; load them by passing a spritesheet's image file path to an appropriate method and get them by passing their spritesheet's image file name (without extension) to an appropriate method."],["World","A [Resource] container, which provides methods to insert, access and manage the contained resources."]],"trait":[["Builder","A common trait for `EntityBuilder` and `LazyBuilder`, allowing either to be used. Entity is definitely alive, but the components may or may not exist before a call to `World::maintain`."],["ByAxis","Anything implementing the `ByAxis` trait, returns an item through the `by_axis` method, by passing an `&Axis`. This is useful when you have a tuple or similar with two items, where each item represents an axis. You can get the specifc item by indexing with an `Axis`. Here's an example, and what code this would save: ``` use deathframe_core::geo::prelude::{Axis, ByAxis};"],["WorldExt","This trait provides some extension methods to make working with shred's [World] easier."]],"type":[["Point",""],["Vector",""]]});