initSidebarItems({"constant":[["ALL_HOSTS","All hosts supported by CPAL on this platform."]],"enum":[["BuildStreamError","Error that can happen when creating a `Stream`."],["DefaultFormatError","May occur when attempting to request the default input or output stream format from a `Device`."],["DeviceNameError","An error that may occur while attempting to retrieve a device name."],["DevicesError","An error that might occur while attempting to enumerate the available devices on a system."],["HostId","Unique identifier for available hosts on the platform."],["PauseStreamError","Errors that might occur when calling `pause_stream`."],["PlayStreamError","Errors that might occur when calling `play_stream`."],["SampleFormat","Format that each sample has."],["StreamData","Stream data passed to the `EventLoop::run` callback."],["StreamError","Errors that might occur while a stream is running."],["SupportedFormatsError","Error that can happen when enumerating the list of supported formats."],["UnknownTypeInputBuffer","This is the struct that is provided to you by cpal when you want to read samples from a buffer."],["UnknownTypeOutputBuffer","This is the struct that is provided to you by cpal when you want to write samples to a buffer."]],"fn":[["available_hosts","Produces a list of hosts that are currently available on the system."],["default_host","The default host for the current compilation target platform."],["host_from_id","Given a unique host identifier, initialise and produce the host if it is available."]],"mod":[["platform","Platform-specific items."],["traits","The suite of traits allowing CPAL to abstract over hosts, devices, event loops and stream IDs."]],"struct":[["BackendSpecificError","Some error has occurred that is specific to the backend from which it was produced."],["Device","The Device implementation associated with the platform's dynamically dispatched Host type."],["Devices","The Devices iterator associated with the platform's dynamically dispatched Host type."],["EventLoop","The EventLoop implementation associated with the platform's dynamically dispatched Host type."],["Format","The format of an input or output audio stream."],["Host","The platform's dynamically dispatched Host type."],["HostUnavailable","The requested host, although supported on this platform, is unavailable."],["InputBuffer","Represents a buffer containing audio data that may be read."],["OutputBuffer","Represents a buffer that must be filled with audio data. The buffer in unfilled state may contain garbage values."],["SampleRate","The number of samples processed per second for a single channel of audio."],["StreamId","The StreamId implementation associated with the platform's dynamically dispatched Host type."],["SupportedFormat","Describes a range of supported stream formats."],["SupportedInputFormats","The SupportedInputFormats iterator associated with the platform's dynamically dispatched Host type."],["SupportedOutputFormats","The SupportedOutputFormats iterator associated with the platform's dynamically dispatched Host type."]],"trait":[["Sample","Trait for containers that contain PCM data."]],"type":[["ChannelCount","Number of channels."],["InputDevices","A host's device iterator yielding only input devices."],["OutputDevices","A host's device iterator yielding only output devices."],["StreamDataResult","Stream data passed to the `EventLoop::run` callback, or an error in the case that the device was invalidated or some backend-specific error occurred."]]});