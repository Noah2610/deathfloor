var ALIASES = {};
ALIASES["adler32"] = {};
ALIASES["ahash"] = {};
ALIASES["aho_corasick"] = {};
ALIASES["alga"] = {};
ALIASES["alga_derive"] = {};
ALIASES["alsa_sys"] = {};
ALIASES["amethyst"] = {};
ALIASES["amethyst_animation"] = {};
ALIASES["amethyst_assets"] = {};
ALIASES["amethyst_audio"] = {};
ALIASES["amethyst_config"] = {};
ALIASES["amethyst_controls"] = {};
ALIASES["amethyst_core"] = {};
ALIASES["amethyst_derive"] = {};
ALIASES["amethyst_error"] = {};
ALIASES["amethyst_input"] = {};
ALIASES["amethyst_rendy"] = {};
ALIASES["amethyst_ui"] = {};
ALIASES["amethyst_utils"] = {};
ALIASES["amethyst_window"] = {};
ALIASES["andrew"] = {};
ALIASES["approx"] = {};
ALIASES["arrayvec"] = {};
ALIASES["ash"] = {};
ALIASES["atom"] = {};
ALIASES["atty"] = {};
ALIASES["backtrace"] = {};
ALIASES["backtrace_sys"] = {};
ALIASES["base64"] = {};
ALIASES["bitflags"] = {};
ALIASES["byteorder"] = {};
ALIASES["c2_chacha"] = {};
ALIASES["cfg_if"] = {};
ALIASES["cgmath"] = {};
ALIASES["chrono"] = {};
ALIASES["claxon"] = {};
ALIASES["climer"] = {};
ALIASES["climer_derive"] = {};
ALIASES["clipboard"] = {};
ALIASES["color_quant"] = {};
ALIASES["colored"] = {};
ALIASES["colorful"] = {};
ALIASES["const_random"] = {};
ALIASES["const_random_macro"] = {};
ALIASES["cpal"] = {};
ALIASES["crc32fast"] = {};
ALIASES["crossbeam_channel"] = {};
ALIASES["crossbeam_deque"] = {};
ALIASES["crossbeam_epoch"] = {};
ALIASES["crossbeam_queue"] = {};
ALIASES["crossbeam_utils"] = {};
ALIASES["ctor"] = {};
ALIASES["darling"] = {};
ALIASES["darling_core"] = {};
ALIASES["darling_macro"] = {};
ALIASES["deathfloor"] = {};
ALIASES["deathframe"] = {};
ALIASES["deathframe_animation"] = {};
ALIASES["deathframe_audio"] = {};
ALIASES["deathframe_core"] = {};
ALIASES["deathframe_physics"] = {};
ALIASES["deflate"] = {};
ALIASES["derivative"] = {};
ALIASES["derive_builder"] = {};
ALIASES["derive_builder_core"] = {};
ALIASES["derive_new"] = {};
ALIASES["dirs"] = {};
ALIASES["dirs_sys"] = {};
ALIASES["dlib"] = {};
ALIASES["downcast_rs"] = {};
ALIASES["edit_distance"] = {};
ALIASES["either"] = {};
ALIASES["env_logger"] = {};
ALIASES["erased_serde"] = {};
ALIASES["err_derive"] = {};
ALIASES["euclid"] = {};
ALIASES["expat_sys"] = {};
ALIASES["failure"] = {};
ALIASES["failure_derive"] = {};
ALIASES["fern"] = {};
ALIASES["float_ord"] = {};
ALIASES["fnv"] = {};
ALIASES["font_kit"] = {};
ALIASES["fontconfig"] = {};
ALIASES["fontconfig_sys"] = {};
ALIASES["freetype"] = {};
ALIASES["freetype_sys"] = {};
ALIASES["fxhash"] = {};
ALIASES["generic_array"] = {};
ALIASES["genmesh"] = {};
ALIASES["getrandom"] = {};
ALIASES["getset"] = {};
ALIASES["gfx_backend_vulkan"] = {};
ALIASES["gfx_hal"] = {};
ALIASES["ghost"] = {};
ALIASES["gif"] = {};
ALIASES["glsl_layout"] = {};
ALIASES["glsl_layout_derive"] = {};
ALIASES["glyph_brush"] = {};
ALIASES["glyph_brush_layout"] = {};
ALIASES["hashbrown"] = {};
ALIASES["heck"] = {};
ALIASES["hibitset"] = {};
ALIASES["hound"] = {};
ALIASES["ident_case"] = {};
ALIASES["image"] = {};
ALIASES["inflate"] = {};
ALIASES["inventory"] = {};
ALIASES["inventory_impl"] = {};
ALIASES["itertools"] = {};
ALIASES["itoa"] = {};
ALIASES["jpeg_decoder"] = {};
ALIASES["lazy_static"] = {};
ALIASES["lewton"] = {};
ALIASES["lexical"] = {};
ALIASES["lexical_core"] = {};
ALIASES["libc"] = {};
ALIASES["libloading"] = {};
ALIASES["libm"] = {};
ALIASES["line_drawing"] = {};
ALIASES["linked_hash_map"] = {};
ALIASES["lock_api"] = {};
ALIASES["log"] = {};
ALIASES["lyon_geom"] = {};
ALIASES["lyon_path"] = {};
ALIASES["lzw"] = {};
ALIASES["matrixmultiply"] = {};
ALIASES["maybe_uninit"] = {};
ALIASES["memchr"] = {};
ALIASES["memmap"] = {};
ALIASES["memoffset"] = {};
ALIASES["minimp3"] = {};
ALIASES["minimp3_sys"] = {};
ALIASES["mint"] = {};
ALIASES["minterpolate"] = {};
ALIASES["mopa"] = {};
ALIASES["nalgebra"] = {};
ALIASES["nix"] = {};
ALIASES["nodrop"] = {};
ALIASES["nom"] = {"?":[{'crate':'nom','ty':8,'name':'Try','desc':'A trait for customizing the behavior of the `?` operator.','p':'nom::lib::std::ops'}],"*":[{'crate':'nom','ty':8,'name':'Mul','desc':'The multiplication operator `*`.','p':'nom::lib::std::ops'},{'crate':'nom','ty':8,'name':'MulAssign','desc':'The multiplication assignment operator `*=`.','p':'nom::lib::std::ops'},{'crate':'nom','ty':8,'name':'Deref','desc':'Used for immutable dereferencing operations, like `*v`.','p':'nom::lib::std::ops'},{'crate':'nom','ty':8,'name':'DerefMut','desc':'Used for mutable dereferencing operations, like in `*v =…','p':'nom::lib::std::ops'}],">=":[{'crate':'nom','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'nom::lib::std::cmp'},{'crate':'nom','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'nom::lib::std::cmp'},{'crate':'nom','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'nom::lib::std::prelude::v1::v1'},{'crate':'nom','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'nom::lib::std::prelude::v1::v1'}],"..=":[{'crate':'nom','ty':3,'name':'RangeInclusive','desc':'A range bounded inclusively below and above (`start..=end`).','p':'nom::lib::std::ops'},{'crate':'nom','ty':3,'name':'RangeToInclusive','desc':'A range only bounded inclusively above (`..=end`).','p':'nom::lib::std::ops'}],"^=":[{'crate':'nom','ty':8,'name':'BitXorAssign','desc':'The bitwise XOR assignment operator `^=`.','p':'nom::lib::std::ops'}],">":[{'crate':'nom','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'nom::lib::std::cmp'},{'crate':'nom','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'nom::lib::std::cmp'},{'crate':'nom','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'nom::lib::std::prelude::v1::v1'},{'crate':'nom','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'nom::lib::std::prelude::v1::v1'}],"<=":[{'crate':'nom','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'nom::lib::std::cmp'},{'crate':'nom','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'nom::lib::std::cmp'},{'crate':'nom','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'nom::lib::std::prelude::v1::v1'},{'crate':'nom','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'nom::lib::std::prelude::v1::v1'}],"^":[{'crate':'nom','ty':8,'name':'BitXor','desc':'The bitwise XOR operator `^`.','p':'nom::lib::std::ops'}],"&=":[{'crate':'nom','ty':8,'name':'BitAndAssign','desc':'The bitwise AND assignment operator `&=`.','p':'nom::lib::std::ops'}],"[]":[{'crate':'nom','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'nom::lib::std::ops'},{'crate':'nom','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'nom::lib::std::ops'}],"+":[{'crate':'nom','ty':8,'name':'Add','desc':'The addition operator `+`.','p':'nom::lib::std::ops'},{'crate':'nom','ty':8,'name':'AddAssign','desc':'The addition assignment operator `+=`.','p':'nom::lib::std::ops'}],"%":[{'crate':'nom','ty':8,'name':'Rem','desc':'The remainder operator `%`.','p':'nom::lib::std::ops'},{'crate':'nom','ty':8,'name':'RemAssign','desc':'The remainder assignment operator `%=`.','p':'nom::lib::std::ops'}],">>=":[{'crate':'nom','ty':8,'name':'ShrAssign','desc':'The right shift assignment operator `>>=`.','p':'nom::lib::std::ops'}],"/":[{'crate':'nom','ty':8,'name':'Div','desc':'The division operator `/`.','p':'nom::lib::std::ops'},{'crate':'nom','ty':8,'name':'DivAssign','desc':'The division assignment operator `/=`.','p':'nom::lib::std::ops'}],"[":[{'crate':'nom','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'nom::lib::std::ops'},{'crate':'nom','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'nom::lib::std::ops'}],"..":[{'crate':'nom','ty':3,'name':'Range','desc':'A (half-open) range bounded inclusively below and…','p':'nom::lib::std::ops'},{'crate':'nom','ty':3,'name':'RangeFrom','desc':'A range only bounded inclusively below (`start..`).','p':'nom::lib::std::ops'},{'crate':'nom','ty':3,'name':'RangeFull','desc':'An unbounded range (`..`).','p':'nom::lib::std::ops'},{'crate':'nom','ty':3,'name':'RangeTo','desc':'A range only bounded exclusively above (`..end`).','p':'nom::lib::std::ops'}],"<<":[{'crate':'nom','ty':8,'name':'Shl','desc':'The left shift operator `<<`. Note that because this trait…','p':'nom::lib::std::ops'}],"{}":[{'crate':'nom','ty':8,'name':'Display','desc':'Format trait for an empty format, `{}`.','p':'nom::lib::std::fmt'}],"<":[{'crate':'nom','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'nom::lib::std::cmp'},{'crate':'nom','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'nom::lib::std::cmp'},{'crate':'nom','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'nom::lib::std::prelude::v1::v1'},{'crate':'nom','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'nom::lib::std::prelude::v1::v1'}],"*=":[{'crate':'nom','ty':8,'name':'MulAssign','desc':'The multiplication assignment operator `*=`.','p':'nom::lib::std::ops'}],"&":[{'crate':'nom','ty':8,'name':'BitAnd','desc':'The bitwise AND operator `&`.','p':'nom::lib::std::ops'}],"|=":[{'crate':'nom','ty':8,'name':'BitOrAssign','desc':'The bitwise OR assignment operator `|=`.','p':'nom::lib::std::ops'}],"|":[{'crate':'nom','ty':8,'name':'BitOr','desc':'The bitwise OR operator `|`.','p':'nom::lib::std::ops'}],"&*":[{'crate':'nom','ty':8,'name':'Deref','desc':'Used for immutable dereferencing operations, like `*v`.','p':'nom::lib::std::ops'}],">>":[{'crate':'nom','ty':8,'name':'Shr','desc':'The right shift operator `>>`. Note that because this…','p':'nom::lib::std::ops'}],"-=":[{'crate':'nom','ty':8,'name':'SubAssign','desc':'The subtraction assignment operator `-=`.','p':'nom::lib::std::ops'}],"==":[{'crate':'nom','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'nom::lib::std::cmp'},{'crate':'nom','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'nom::lib::std::cmp'},{'crate':'nom','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'nom::lib::std::prelude::v1::v1'},{'crate':'nom','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'nom::lib::std::prelude::v1::v1'}],"!=":[{'crate':'nom','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'nom::lib::std::cmp'},{'crate':'nom','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'nom::lib::std::cmp'},{'crate':'nom','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'nom::lib::std::prelude::v1::v1'},{'crate':'nom','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'nom::lib::std::prelude::v1::v1'}],"-":[{'crate':'nom','ty':8,'name':'Neg','desc':'The unary negation operator `-`.','p':'nom::lib::std::ops'},{'crate':'nom','ty':8,'name':'Sub','desc':'The subtraction operator `-`.','p':'nom::lib::std::ops'},{'crate':'nom','ty':8,'name':'SubAssign','desc':'The subtraction assignment operator `-=`.','p':'nom::lib::std::ops'}],"+=":[{'crate':'nom','ty':8,'name':'AddAssign','desc':'The addition assignment operator `+=`.','p':'nom::lib::std::ops'}],"<<=":[{'crate':'nom','ty':8,'name':'ShlAssign','desc':'The left shift assignment operator `<<=`.','p':'nom::lib::std::ops'}],"{:?}":[{'crate':'nom','ty':8,'name':'Debug','desc':'`?` formatting.','p':'nom::lib::std::fmt'}],"%=":[{'crate':'nom','ty':8,'name':'RemAssign','desc':'The remainder assignment operator `%=`.','p':'nom::lib::std::ops'}],"/=":[{'crate':'nom','ty':8,'name':'DivAssign','desc':'The division assignment operator `/=`.','p':'nom::lib::std::ops'}],"]":[{'crate':'nom','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'nom::lib::std::ops'},{'crate':'nom','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'nom::lib::std::ops'}],};
ALIASES["num"] = {};
ALIASES["num_bigint"] = {};
ALIASES["num_complex"] = {};
ALIASES["num_cpus"] = {};
ALIASES["num_derive"] = {};
ALIASES["num_integer"] = {};
ALIASES["num_iter"] = {};
ALIASES["num_rational"] = {};
ALIASES["num_traits"] = {};
ALIASES["objekt"] = {};
ALIASES["ogg"] = {};
ALIASES["ordered_float"] = {};
ALIASES["palette"] = {};
ALIASES["palette_derive"] = {};
ALIASES["parking_lot"] = {};
ALIASES["parking_lot_core"] = {};
ALIASES["paste"] = {};
ALIASES["paste_impl"] = {};
ALIASES["percent_encoding"] = {};
ALIASES["phf"] = {};
ALIASES["phf_shared"] = {};
ALIASES["png"] = {};
ALIASES["ppv_lite86"] = {};
ALIASES["proc_macro2"] = {};
ALIASES["proc_macro_crate"] = {};
ALIASES["proc_macro_error"] = {};
ALIASES["proc_macro_error_attr"] = {};
ALIASES["proc_macro_hack"] = {};
ALIASES["proc_macro_roids"] = {};
ALIASES["quickcheck"] = {};
ALIASES["quote"] = {};
ALIASES["rand"] = {};
ALIASES["rand_chacha"] = {};
ALIASES["rand_core"] = {};
ALIASES["rand_distr"] = {};
ALIASES["rand_hc"] = {};
ALIASES["rand_isaac"] = {};
ALIASES["rand_jitter"] = {};
ALIASES["rand_os"] = {};
ALIASES["rand_pcg"] = {};
ALIASES["rand_xorshift"] = {};
ALIASES["raw_window_handle"] = {};
ALIASES["rawpointer"] = {};
ALIASES["rayon"] = {};
ALIASES["rayon_core"] = {};
ALIASES["regex"] = {};
ALIASES["regex_syntax"] = {};
ALIASES["relevant"] = {};
ALIASES["rendy"] = {};
ALIASES["rendy_chain"] = {};
ALIASES["rendy_command"] = {};
ALIASES["rendy_descriptor"] = {};
ALIASES["rendy_factory"] = {};
ALIASES["rendy_frame"] = {};
ALIASES["rendy_graph"] = {};
ALIASES["rendy_memory"] = {};
ALIASES["rendy_mesh"] = {};
ALIASES["rendy_resource"] = {};
ALIASES["rendy_shader"] = {};
ALIASES["rendy_texture"] = {};
ALIASES["rendy_util"] = {};
ALIASES["rendy_wsi"] = {};
ALIASES["rodio"] = {};
ALIASES["ron"] = {};
ALIASES["rustc_demangle"] = {};
ALIASES["rustc_hash"] = {};
ALIASES["rustc_version"] = {};
ALIASES["rustc_version_runtime"] = {};
ALIASES["rusttype"] = {};
ALIASES["ryu"] = {};
ALIASES["same_file"] = {};
ALIASES["scoped_threadpool"] = {};
ALIASES["scopeguard"] = {};
ALIASES["semver"] = {};
ALIASES["semver_parser"] = {};
ALIASES["serde"] = {};
ALIASES["serde_bytes"] = {};
ALIASES["serde_derive"] = {};
ALIASES["serde_json"] = {};
ALIASES["shared_library"] = {};
ALIASES["shred"] = {};
ALIASES["shred_derive"] = {};
ALIASES["shrev"] = {};
ALIASES["siphasher"] = {};
ALIASES["slab"] = {};
ALIASES["slice_deque"] = {};
ALIASES["smallvec"] = {};
ALIASES["smithay_client_toolkit"] = {};
ALIASES["specs"] = {};
ALIASES["specs_derive"] = {};
ALIASES["specs_hierarchy"] = {};
ALIASES["static_assertions"] = {};
ALIASES["stb_truetype"] = {};
ALIASES["strsim"] = {};
ALIASES["syn"] = {};
ALIASES["syn_mid"] = {};
ALIASES["synstructure"] = {};
ALIASES["thiserror"] = {};
ALIASES["thiserror_impl"] = {};
ALIASES["thread_local"] = {};
ALIASES["thread_profiler"] = {};
ALIASES["tiff"] = {};
ALIASES["time"] = {};
ALIASES["tinyvec"] = {};
ALIASES["toml"] = {};
ALIASES["tuple_utils"] = {};
ALIASES["twox_hash"] = {};
ALIASES["tynm"] = {};
ALIASES["typenum"] = {};
ALIASES["unicode_normalization"] = {};
ALIASES["unicode_segmentation"] = {};
ALIASES["unicode_xid"] = {};
ALIASES["void"] = {};
ALIASES["walkdir"] = {};
ALIASES["wavefront_obj"] = {};
ALIASES["wayland_client"] = {};
ALIASES["wayland_commons"] = {};
ALIASES["wayland_protocols"] = {};
ALIASES["wayland_sys"] = {};
ALIASES["winit"] = {};
ALIASES["x11"] = {};
ALIASES["x11_clipboard"] = {};
ALIASES["x11_dl"] = {};
ALIASES["xcb"] = {};
ALIASES["xdg"] = {};
ALIASES["xi_unicode"] = {};
ALIASES["xml"] = {};
