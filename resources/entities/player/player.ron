// src/settings/player_settings.rs

#![enable(implicit_some)]
/// Player settings.
(
    spritesheet: "player.png",

    /// The player's entity config.
    entity: (
        inherits: ["PlayerCrouch", "PlayerDodge", "PlayerMusha"],

        size: (
            w: 32.0,
            h: 32.0,
        ),

        components: [
            /// The player's in-game size.
            /// Player jump settings.
            Jumper((
                /// The gravity applied only when jumping (holding down the jump button).
                gravity: (
                    x: None,
                    y: -450.0,
                ),
                /// The velocity boost when jumping.
                strength: (
                    y: 220.0,
                ),
                /// The velocity boost, when releasing the jump button after jumping.
                /// Should be negative.
                kill_strength: (
                    y: -60.0,
                ),
                /// The minimum amount of upwards velocity the player should
                /// at least still have, after killing their jump.
                min_velocity: (
                    y: 45.0,
                ),
            )),
            /// Player wall jump settings.
            WallJumper((
                /// The velocity boost (x, y) when wall-jumping.
                /// Both values should be positive.
                strength: (
                    x: 200.0,
                    y: 200.0,
                ),
            )),
            /// Player wall sliding settings.
            WallSlider((
                /// Fixed y velocity when sliding on wall.
                slide_velocity: -40.0,
            )),
            /// The minimum amount of x velocity the player should have,
            /// after they stop moving on the ground.
            /// Set to `0.0` to make player completely stop after moving.
            /// Has to be positive.
            KillVelocityMin((
                min_velocity: 25.0,
            )),
            /// Data for the player shooting.
            Shooter((
                /// Shooting cooldown delay in milliseconds.
                /// Delay after shooting, before the player can shoot again.
                cooldown_ms: 450,
            )),
            /// Starting health.
            Health((
                health: 30,
                max_health: 30,
            )),
            /// Component for rendering health.
            HealthDisplay((
                position:       Top,
                size:           (32.0, 2.0),
                padding:        4.0,
                border_padding: 0.5,
            )),
        ],

        events: {
            OnSpawn: EntityAction(SwitchVariant("Control")),

            // ---------
            // FUNCTIONS
            // ---------

            // Gain health on health consumable pickup.
            // Called from custom entity "ConsumableHealth".
            Function("PickupHealth"): HealthAction(Gain(10)),

            // ------
            // CHEATS
            // ------

            OnKeyDown(Custom("GainHealth")):
                HealthAction(Gain(10)),
        },

        variants: {
            /// When the user is in control of the player.
            /// This is used to reset base gameplay components, while not
            /// resetting components such as `Health`, which should only
            /// be set once to avoid regaining full health on variant switch.
            "Control": (
                components: [
                    /// The normal gravity.
                    Gravity((
                        y: -900.0,
                    )),
                    /// Friction factor applied to velocity every frame.
                    BaseFriction((
                        x: 800.0,
                    )),
                    /// Soft-max for movement velocity.
                    MaxMovementVelocity((
                        x: 85.0,
                        y: 410.0,
                    )),
                    /// Movement acceleration.
                    MovementAcceleration((
                        x: 950.0,
                        y: 1500.0, // DEBUG
                    )),
                    /// The player's hitbox.
                    Hitbox(Custom([
                        (
                            top:    10.0,
                            bottom: -16.0,
                            left:   -6.0,
                            right:  6.0,
                        ),
                    ])),
                    /// Player animations config.
                    Animations({
                        Idle: Cycle([
                            (5, 150),
                            (6, 150),
                            (7, 150),
                        ]),
                        Walk: Cycle([
                            (0, 130),
                            (1, 130),
                            (2, 130),
                            (3, 130),
                        ]),
                        Jump: Once([
                            (10, 25),
                            (12, 100),
                        ]),
                        Rising: Cycle([
                            (5, 1000),
                        ]),
                        Falling: Cycle([
                            (0, 250),
                            (2, 250),
                        ]),
                        Custom("Shoot"): Once([
                            (1, 15),
                        ]),
                    }),
                    /// Player takes damage against damage-dealing entities (DealsDamage).
                    TakesDamage(()),
                    /// Pushes entities that this solid tag collides with,
                    /// that have the `SolidPushable` component.
                    SolidPusher(()),
                ],

                events: {
                    // ---------------
                    // SET CONTROLLABLE
                    // ---------------

                    Init: ControlAction(SetControllable(true)),

                    // ---------------
                    // ENEMY KNOCKBACK
                    // ---------------

                    OnCollision(And([
                        IsTag("Enemy"),
                        Not(IsTag("NoKnockback")),
                        IsState(Enter),
                        Or([
                            IsSide(Left),
                            IsSide(InnerSide( x: Left )),
                        ]),
                    ])): Group([
                            MoveAction(AddVelocity(
                            x: 500.0,
                            y: 250.0,
                        )),
                        EntityAction(PushVariant("Knockback")),
                    ]),

                    OnCollision(And([
                        IsTag("Enemy"),
                        Not(IsTag("NoKnockback")),
                        IsState(Enter),
                        Or([
                            IsSide(Right),
                            IsSide(InnerSide( x: Right )),
                        ]),
                    ])): Group([
                        MoveAction(AddVelocity(
                            x: -500.0,
                            y: 250.0,
                        )),
                        EntityAction(PushVariant("Knockback")),
                    ]),

                    OnCollision(And([
                        IsTag("Enemy"),
                        Not(IsTag("NoKnockback")),
                        IsState(Enter),
                        Or([
                            IsSide(Bottom),
                            IsSide(InnerSide( y: Bottom )),
                        ]),
                    ])): MoveAction(AddVelocity(
                        y: 250.0,
                    )),
                },
            ),

            "Knockback": (
                components: [
                    BaseFriction(None),
                ],
                events: {
                    Delay(250): EntityAction(PopVariant),
                },
            ),
        },

        /// For _general_ collision checking.
        collision_tag: (
            /// `CollisionLabel`s for the player.
            /// Used with other collider entities, to check if they collide with this entity.
            labels: ["Player", "Pusher"],
            /// `CollisionLabel`s that the player collides with.
            collides_with: [
                "Tile",
                "Solid",
                "Jumppad",
                "Enemy",
                "EnemyBullet",
                "Consumable",
                "Interactable",
            ],
        ),

        /// For _solid_ collision checking.
        /// Also for `SolidPusher` collision.
        solid_tag: (
            labels: ["Player", "Pusher"],
            collides_with: ["Solid", "Pushable"],
        ),
    ),
)
