#![enable(implicit_some)]
/// Player settings.
(
    /// The player's in-game size.
    size: (
        width:  12.0,
        height: 16.0,
    ),

    /// The player's physics data; stuff involving velocity.
    physics: (
        /// Movement acceleration.
        acceleration:        (900.0, 1400.0),
        /// Soft-max for movement velocity.
        max_velocity:        (140.0, 420.0),
        /// Friction factor applied to velocity every frame.
        base_friction:       (1000.0, None),
        /// The normal gravity.
        gravity:             (None, -900.0),
    ),

    /// The player's hitbox.
    hitbox: Size,

    /// For _general_ collision checking.
    collision_tag: (
        /// `CollisionLabel`s for the player.
        /// Used with other collider entities, to check if they collide with this entity.
        labels: [Player],
        /// `CollisionLabel`s that the player collides with.
        collides_with: [Tile, Solid, Jumppad, Bullet, Enemy],
    ),

    /// For _solid_ collision checking.
    solid_tag: (
        labels: [Player],
        collides_with: [Solid],
    ),

    /// Player jump settings.
    jumper: (
        /// The gravity applied only when jumping (holding down the jump button).
        gravity:        (None, -450.0),
        /// The velocity boost when jumping.
        strength:       200.0,
        /// The velocity boost, when releasing the jump button after jumping.
        /// Should be negative.
        kill_strength:  -60.0,
        /// The minimum amount of upwards velocity the player should
        /// at least still have, after killing their jump.
        min_velocity:   45.0,
    ),

    /// Player wall jump settings.
    /// Optional.
    wall_jumper: (
        /// The velocity boost (x, y) when wall-jumping.
        /// Both values should be positive.
        strength:  (200.0, 200.0),
    ),

    /// Player wall sliding settings.
    /// Optional.
    wall_slider: (
        /// Fixed y velocity when sliding on wall.
        slide_velocity: -20.0,
    ),

    /// Data for the player shooting.
    shooter: (
        /// Shooting cooldown delay in milliseconds.
        /// Delay after shooting, before the player can shoot again.
        cooldown_ms: 100,
        /// Data for the spawned bullets.
        bullet: (
            /// The bullet's size.
            size: (8.0, 4.0),
            /// Bullet velocity (x, y).
            /// Both axes should be positive, are inverted in-game, if necessary.
            velocity: (300.0, 0.0),
            /// Despawn the bullet after this amount of milliseconds.
            despawn_after_ms: 5_000,
            /// Bullet animation frames. Uses `spritesheets/player_bullet.png` spritesheet.
            animation: Cycle([
                (0, 100),
                (1, 100),
                (2, 100),
                (1, 100),
            ]),
        ),
    ),

    /// Player animations config.
    animations: {
        Idle: Cycle([
            (13, 500),
            (14, 500),
        ]),
        Walk: Cycle([
            (1, 100),
            (2, 100),
            (3, 100),
            (4, 100),
            (5, 100),
            (6, 100),
            (7, 100),
            (8, 100),
            (9, 100),
            (10, 100),
            (12, 100),
        ]),
    },

    /// Starting health.
    health: (
        health: 20,
        max_health: 20,
    ),

    /// Component for rendering health.
    health_display: (
        position:       Top,
        size:           (32.0, 2.0),
        padding:        4.0,
        border_padding: 0.5,
    ),

    /// Player takes damage against damage-dealing entities (DealsDamage).
    takes_damage: (
        /// Takes damage against entities with these general collision tag labels.
        takes_damage_from: [Enemy],
    ),
)
