#![enable(implicit_some)]
/// Enemies settings.
(
    types: {
        "NormalLeft": (
            /// Filename of this enemy's spritesheet,
            /// under `resources/spritesheets`.
            spritesheet_filename: "enemy_normal.png",

            /// Entity data, such as _components_, _events/actions_, collision stuff.
            entity: (
                /// List of components for this enemy.
                /// All components are optional.
                components: (
                    /// If this is not set, uses tiled object size.
                    size: (
                        w: 16.0,
                        h: 24.0,
                    ),
                    gravity: (
                        x: None,
                        y: -400.0,
                    ),
                    max_movement_velocity: (
                        x: 100.0,
                        y: 200.0,
                    ),
                    base_friction: (
                        friction_x: 1000.0,
                        friction_y: None,
                    ),
                    animations: {
                        Idle: Cycle([
                            (13, 500),
                            (14, 500),
                        ]),
                        Walk: Cycle([
                            (4, 100),
                            (5, 100),
                            (6, 100),
                        ]),
                    },
                    hitbox: Size,
                    walker: (
                        x: -250.0,
                        y: None,
                    ),
                    health: (
                        health: 6,
                        max_health: 6,
                    ),
                    health_display: (
                        position: Top,
                        size: (32.0, 2.0),
                        padding: 4.0,
                        border_padding: 0.5,
                    ),
                    deals_damage: (
                        damage: 4,
                    ),
                ),

                /// Events and the actions they trigger.
                events: {
                    OnCollision(
                        And([
                            IsSide(Left),
                            IsTag("Player"),
                        ]),
                    ): MoveAction(AddVelocity(
                        x: 200.0,
                    )),

                    OnCollision(
                        And([
                            IsSide(Right),
                            IsTag("Player"),
                        ]),
                    ): MoveAction(AddVelocity(
                        x: -200.0,
                    )),

                    OnCollision(
                        And([
                            IsTag("Bullet"),
                            IsState(Enter),
                        ]),
                    ): Group([
                        SoundAction(PlayWithVolume(Jump, 0.3)),
                        MoveAction(SetVelocity(
                            y: 100.0,
                        )),
                        HealthAction(Lose(2)),
                    ]),

                    // PIVOT / TURN-AROUND WHEN TOUCHING ANYHING

                    // When colliding with anything to the RIGHT, start walking LEFT.
                    OnCollision(And([
                        // Check for both sides `Right` (just the edge of the hitbox),
                        // _or_ `InnerSide(Right)` (inside the hitbox, but closer to the right edge).
                        Or([IsSide(Right), IsSide(InnerSide( x: Right ))]),
                        // Check for an `Enter` state, meaning the collision just occured this frame.
                        IsState(Enter),
                    ])): Group([
                        InsertComponents((
                            walker: (
                                x: -250.0,
                            ),
                        )),
                    ]),

                    // When colliding with anything to the LEFT, start walking RIGHT.
                    // Same as above, just inverted.
                    OnCollision(And([
                        Or([IsSide(Left), IsSide(InnerSide( x: Left ))]),
                        IsState(Enter),
                    ])): Group([
                        InsertComponents((
                            walker: (
                                x: 250.0,
                            ),
                        )),
                    ]),
                },

                /// Specifies with which `CollisionTag`s this enemy has
                /// _general_ collision (separate from _solid_ collision).
                /// If this is not set, the player will not be able to jump
                /// off of this enemy (because this enemy is `Jumppad`).
                collision_tag: (
                    labels: ["Enemy", "Solid"],
                    collides_with: ["Player", "Solid", "Jumppad", "Bullet"],
                ),

                /// Specifies with which `SolidTag`s this enemy has
                /// _solid_ collision (separate from _general_ collision (`CollisionTag`)).
                ///
                /// This makes the player have solid collision with the player.
                /// (They can get stuck in each other, not recommended;
                /// this is just to showcase the `solid_collision_with` field.)
                ///
                /// Enemies will usually also have solid collision with `Tile` tags.
                solid_tag: (
                    labels: ["Enemy", "Solid"],
                    collides_with: ["Solid"],
                ),
            ),
        ),
    }
)
