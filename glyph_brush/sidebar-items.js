initSidebarItems({"enum":[["BrushAction","Actions that should be taken after processing queue data"],["BrushError",""],["BuiltInLineBreaker","Built-in linebreaking logic."],["GlyphChange",""],["HorizontalAlign","Describes horizontal alignment preference for positioning & bounds."],["Layout","Built-in `GlyphPositioner` implementations."],["LineBreak","Indicator that a character is a line break, soft or hard. Includes the offset (byte-index) position."],["VerticalAlign","Describes vertical alignment preference for positioning & bounds. Currently a placeholder for future functionality."]],"macro":[["delegate_glyph_brush_builder_fns","Macro to delegate builder methods to an inner `glyph_brush::GlyphBrushBuilder`"]],"mod":[["rusttype","Re-exported rusttype types."]],"struct":[["FontId","Id for a font"],["GlyphBrush","Object allowing glyph drawing, containing cache state. Manages glyph positioning cacheing, glyph draw caching & efficient GPU texture cache updating."],["GlyphBrushBuilder","Builder for a `GlyphBrush`."],["GlyphCalculator","Cut down version of a `GlyphBrush` that can calculate pixel bounds, but is unable to actually render anything."],["GlyphCalculatorBuilder","Builder for a `GlyphCalculator`."],["GlyphCalculatorGuard","`GlyphCalculator` scoped cache lock."],["GlyphVertex","Data used to generate vertex information for a single glyph"],["OwnedSectionText",""],["OwnedVariedSection",""],["Section","An object that contains all the info to render a section of text."],["SectionGeometry",""],["SectionText",""],["VariedSection","An object that contains all the info to render a varied section of text. That is one including many parts with differing fonts/scales/colors bowing to a single layout."]],"trait":[["FontMap","Mapper of `FontId` -> `Font`"],["GlyphCruncher","Common glyph layout logic."],["GlyphPositioner","Logic to calculate glyph positioning using `Font`, `SectionGeometry` and `SectionText`."],["LineBreaker","Producer of a `LineBreak` iterator. Used to allow to the `Layout` to be line break aware in a generic way."]],"type":[["Color","RGBA `[0, 1]` color data."],["DefaultSectionHasher","A \"practically collision free\" `Section` hasher"],["PositionedGlyphIter","`PositionedGlyph` iterator."]]});